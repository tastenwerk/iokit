#!/usr/bin/env node

var program = require('commander')
  , fs = require('fs')
  , path = require('path')
  , os = require('os')
  , iokitVersion = require( __dirname + '/../lib/version');

program.version(iokitVersion);

var eol = 'win32' == os.platform() ? '\r\n' : '\n'

var app_js = [
"var express = require('express')",
"  , http = require('http')",
"  , path = require('path')",
"  , fs = require('fs')",
"  , iokit = require('iokit');",
"",
"var access_logfile = fs.createWriteStream('./app.log', {flags: 'a'})",
"  , app = express();",
"",
"app.configure(function(){",
"",
"  iokit.inject( express, app ); // inject app with iokit defaults and plugins",
"",
"  //app.use(express.logger({stream: access_logfile }));",
"  app.use(express.logger('dev'));",
"",
"  app.set('port', process.env.PORT || iokit.config.port || 3000);",
"",
" // override iokit's views with your own views",
" // and devine new ones.",
" iokit.view.paths = [ __dirname + '/app/views' ].concat( iokit.view.paths );",
"",
"  app.use(express.methodOverride());",
"  app.use(app.router);",
"});",
"",
"app.configure('development', function(){",
"  app.use(express.errorHandler());",
"  app.locals.pretty = true;",
"});",
"",
"app.get('/', function( req, res ){",
"  res.redirect('/iokit');",
"});",
"",
"http.createServer(app).listen(app.get('port'), function(){",
"  console.log('INTER server listening on port ' + app.get('port'));",
"  iokit.startDBConnection();",
"});",
""
].join(eol);

var settings_json = [
'{',
'"site": {',
'  "title": "__appName__",',
'  "domain": "localhost",',
'  "locales": ["de", "en"],',
'  "layouts": ["default"]',
'  },',
'  "session": {',
'    "timeout": {',
'      "mins": 30',
'    }',
'  },',
'  "datastore": {',
'    "absolutePath": "__absolutePath__",',
'    "maxUploadSizeMB": 50,',
'    "resizeDefaultPX": 500',
'  },',
'  "port": 3000,',
'  "db": {',
'    "url": "mongodb://localhost:27017/__appName__?auto_reconnect",',
'    "debug": true',
'  },',
'  "userRoles": ["manager", "user"],',
'  "mailerSettings": { "host": "localhost.loc", "port": 25, "domain": "localhost.loc", "authentication": false }',
'}'
].join(eol);

var package_json = [
'{',
'  "name": "__appName__",',
'  "version": "0.0.1",',
'  "preferGlobal": "true",',
'  "main": "index",',
'  "dependencies": {',
'    "express": "*",',
'    "jade": "*",',
'    "stylus": "*",',
'    "iokit": "*",',
'    "iomapper": "*"',
'  },',
'  "license": "GPL3",',
'  "engine": {',
'    "node": ">=0.8"',
'  }',
'}'
].join(eol);

program
  .command('new <name>')
  .description('create a new iokit scaffold')
  .action( function createScaffold( name ){
    var normalizedName = name.replace(/ /g, '_');
    mkdir( name );
    mkdir( name + '/app');
    mkdir( name + '/app/plugins');
    mkdir( name + '/app/views');
    mkdir( name + '/config');
    mkdir( name + '/public');
    mkdir( name + '/datastore');
    mkdir( name + '/datastore/files');
    mkdir( name + '/datastore/users');
    mkdir( name + '/public/stylesheets');
    mkdir( name + '/public/javascripts');
    mkdir( name + '/public/images');
    write( name + '/app.js', app_js );
    write( name + '/config/iokit.json', settings_json.replace( /__appName__/g, normalizedName ).replace(/__absolutePath__/g, process.cwd()+path.sep+normalizedName) );
    write( name + '/package.json', package_json.replace( /__appName__/g, name.replace(/ /g, '_') ) );
    write( name + '/README.md', name + ' README' );
    console.log();
    console.log('   \x1b[32msuccess\x1b[0m');
    console.log();
  });

program
  .command('setup [username] [password]')
  .description('setup a manager user and if specified in the configuration website and -pages. If config/tas10_settings.json is not present, it should be passed as argument')
  .action( function setupScaffold( username, password ){
    console.log();
    configfile = './config/iokit.json';
    if( !fs.existsSync( './' + configfile ) )
      return console.log('   \033[31merror\033[0m : ', configfile, ' was not found (if not config/iokit.json, please pass it as argment)');
    openConnection( configfile, username, password );
    console.log();
  })

program.parse(process.argv);

/**
 * echo str > path.
 *
 * @param {String} path
 * @param {String} str
 */

function write(path, str) {
  fs.writeFile(path, str);
  console.log('   \x1b[36mcreate\x1b[0m : ' + path);
}

/**
 * Mkdir -p.
 *
 * @param {String} path
 * @param {Function} fn
 */

function mkdir(path) {
  try{
    fs.mkdirSync( path );
    console.log('   \033[36mcreate\033[0m : ' + path);
  } catch( e ){
    console.log('   \033[31mskipped\033[0m : ' + path + ' exists');
  }
}

function openConnection( configfile, username, password ){

  var username = username || 'manager'
    , password = password || 'mgr'
    , settings = JSON.parse( fs.readFileSync( configfile ) )
    , iomapper = require('iomapper')
    , User = iomapper.models.User;

  if( !settings.db )
    return exitError( configfile + ' does not provide db information. Please check')
  iomapper.connect( settings.db.url );

  User.findOne({ email: username+'@'+settings.site.domain }, function( err, user ){
    var domainName = settings.site.domain;
    if( domainName === 'localhost' )
      domainName = 'localhost.loc';
    if( err ) exitError( err.message );
    if( user ){
      console.log('   \033[31mskipped\033[0m : user ' + username + ' already exists');
      console.log();
      process.exit(0);
    } else
      User.create({ email: username+'@'+domainName, 'name.nick': username, roles: ['user','manager'], password: password}, function( err, user ){
        if( err )
          exitError( 'error creating user: ' + err + ' email: ' + username+'@'+settings.site.domain );
        else
          console.log('   \033[36mcreate\033[0m : user ', user.name.nick, ' with password ' + password + '.' );
        console.log();
        
        process.exit(0);

      });

  });

}

function exitError( msg ){
  console.log('   \033[31merror\033[0m : ' + msg );
}
